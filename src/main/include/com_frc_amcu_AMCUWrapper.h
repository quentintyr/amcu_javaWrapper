/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_frc_amcu_AMCUWrapper */

#ifndef _Included_com_frc_amcu_AMCUWrapper
#define _Included_com_frc_amcu_AMCUWrapper
#ifdef __cplusplus
extern "C" {
#endif
#undef com_frc_amcu_AMCUWrapper_LOADING_TIMEOUT_SECONDS
#define com_frc_amcu_AMCUWrapper_LOADING_TIMEOUT_SECONDS 10L
/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    createNative
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_frc_amcu_AMCUWrapper_createNative
  (JNIEnv *, jobject);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    destroyNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_destroyNative
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    initOmniDriveBaseNative
 * Signature: (JIIIII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_initOmniDriveBaseNative
  (JNIEnv *, jobject, jlong, jint, jint, jint, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    initMecanumDriveBaseNative
 * Signature: (JIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_initMecanumDriveBaseNative
  (JNIEnv *, jobject, jlong, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    initDifferentialDriveBase2WheelNative
 * Signature: (JIIII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_initDifferentialDriveBase2WheelNative
  (JNIEnv *, jobject, jlong, jint, jint, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    initDifferentialDriveBase4WheelNative
 * Signature: (JIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_initDifferentialDriveBase4WheelNative
  (JNIEnv *, jobject, jlong, jint, jint, jint, jint, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    setPIDNative
 * Signature: (JFFF)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_setPIDNative
  (JNIEnv *, jobject, jlong, jfloat, jfloat, jfloat);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    setLimitSwitchesNative
 * Signature: (JIIIII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_setLimitSwitchesNative
  (JNIEnv *, jobject, jlong, jint, jint, jint, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    setRPMNative
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_setRPMNative
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    setSpeedNative
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_setSpeedNative
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    resetEncoderNative
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_resetEncoderNative
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    stopNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_stopNative
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    getEncoderNative
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_frc_amcu_AMCUWrapper_getEncoderNative
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    getRPMNative
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_frc_amcu_AMCUWrapper_getRPMNative
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    speedDriveNative
 * Signature: (JIII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_speedDriveNative
  (JNIEnv *, jobject, jlong, jint, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    timeDriveNative
 * Signature: (JIIII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_timeDriveNative
  (JNIEnv *, jobject, jlong, jint, jint, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    driveDistanceNative
 * Signature: (JIII)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_driveDistanceNative
  (JNIEnv *, jobject, jlong, jint, jint, jint);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    registerLimitSwitchCallbackNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_registerLimitSwitchCallbackNative
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_frc_amcu_AMCUWrapper
 * Method:    registerDriveActionCallbackNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_frc_amcu_AMCUWrapper_registerDriveActionCallbackNative
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
